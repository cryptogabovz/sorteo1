const { sequelize } = require('./app/config/database');

async function fixConstraints() {
  try {
    console.log('üîß Aplicando correcci√≥n final de restricciones...');

    // 1. Verificar restricciones actuales
    const [constraints] = await sequelize.query(`
      SELECT conname as constraint_name, contype as constraint_type
      FROM pg_constraint
      WHERE conrelid = 'participants'::regclass;
    `);

    console.log('Restricciones actuales:');
    constraints.forEach(c => {
      console.log('- Nombre:', c.constraint_name, 'Tipo:', c.constraint_type);
    });

    // 2. Eliminar restricci√≥n de c√©dula si existe (m√∫ltiples m√©todos)
    const cedulaConstraint = constraints.find(c => c.constraint_name === 'participants_cedula');
    if (cedulaConstraint) {
      console.log('‚ùå Eliminando restricci√≥n participants_cedula...');

      // Intentar m√∫ltiples m√©todos para eliminar la restricci√≥n
      try {
        await sequelize.query('ALTER TABLE participants DROP CONSTRAINT IF EXISTS participants_cedula;');
        console.log('‚úÖ Eliminada con ALTER TABLE');
      } catch (error) {
        console.log('‚ö†Ô∏è ALTER TABLE fall√≥, intentando con Sequelize...');
        try {
          const queryInterface = sequelize.getQueryInterface();
          await queryInterface.removeConstraint('participants', 'participants_cedula');
          console.log('‚úÖ Eliminada con Sequelize');
        } catch (sequelizeError) {
          console.log('‚ö†Ô∏è Sequelize fall√≥, intentando con DROP INDEX...');
          try {
            await sequelize.query('DROP INDEX IF EXISTS participants_cedula;');
            console.log('‚úÖ Eliminada con DROP INDEX');
          } catch (indexError) {
            console.log('‚ö†Ô∏è DROP INDEX fall√≥, intentando recrear columna...');
            // √öltimo recurso: recrear columna sin restricciones
            await sequelize.query(`
              DO $$
              BEGIN
                -- Remover cualquier restricci√≥n √∫nica en cedula
                ALTER TABLE participants DROP CONSTRAINT IF EXISTS participants_cedula;
                DROP INDEX IF EXISTS participants_cedula;
                -- Asegurar que la columna permita NULL temporalmente
                ALTER TABLE participants ALTER COLUMN cedula DROP NOT NULL;
                ALTER TABLE participants ALTER COLUMN cedula SET NOT NULL;
              EXCEPTION
                WHEN others THEN
                  RAISE NOTICE 'Error en correcci√≥n: %', SQLERRM;
              END
              $$;
            `);
            console.log('‚úÖ Correcci√≥n con DO block completada');
          }
        }
      }
    } else {
      console.log('‚ÑπÔ∏è Restricci√≥n participants_cedula no existe');
    }

    // 3. Verificar que ticket_number siga siendo √∫nico
    const ticketConstraint = constraints.find(c => c.constraint_name === 'participants_ticket_number');
    if (ticketConstraint) {
      console.log('‚úÖ Restricci√≥n participants_ticket_number existe (correcto)');
    } else {
      console.log('‚ö†Ô∏è ADVERTENCIA: Restricci√≥n participants_ticket_number no encontrada');
    }

    // 4. Verificar restricciones finales
    const [finalConstraints] = await sequelize.query(`
      SELECT conname as constraint_name, contype as constraint_type
      FROM pg_constraint
      WHERE conrelid = 'participants'::regclass;
    `);

    console.log('Restricciones finales:');
    finalConstraints.forEach(c => {
      console.log('- Nombre:', c.constraint_name, 'Tipo:', c.constraint_type);
    });

    // 5. Probar creaci√≥n de registro con c√©dula existente
    console.log('üß™ Probando creaci√≥n de registro con c√©dula existente...');
    const { Participant } = require('./app/models');

    // Verificar si ya existe usuario con c√©dula espec√≠fica
    const existing = await Participant.findAll({
      where: { cedula: '22006181' }
    });

    console.log(`Encontrados ${existing.length} registros con c√©dula 22006181`);

    // Crear registro adicional
    const testParticipant = await Participant.create({
      ticket_number: '9999',
      name: existing.length > 0 ? existing[0].name : 'Test',
      last_name: existing.length > 0 ? existing[0].last_name : 'Migration',
      cedula: '22006181',
      phone: '04140000000',
      province: 'Test Province',
      ticket_validated: true
    });

    console.log('‚úÖ Registro adicional creado:', testParticipant.ticket_number);

    // Verificar total de registros con esta c√©dula
    const totalAfter = await Participant.count({
      where: { cedula: '22006181' }
    });

    console.log(`Total de registros con c√©dula 22006181: ${totalAfter}`);

    // Limpiar solo el registro de prueba
    await testParticipant.destroy();
    console.log('üßπ Registro de prueba eliminado');

    console.log('üéâ CORRECCI√ìN COMPLETADA: M√∫ltiples boletos funcionan correctamente');

  } catch (error) {
    console.error('‚ùå ERROR en correcci√≥n:', error.message);
    if (error.name === 'SequelizeUniqueConstraintError') {
      console.error('Campos con error de unicidad:', error.fields);
    }
  } finally {
    await sequelize.close();
  }
}

fixConstraints();