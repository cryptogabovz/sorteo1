const { sequelize } = require('./app/config/database');

async function fixConstraints() {
  let connectionClosed = false;
  try {
    console.log('üîß Aplicando correcci√≥n final de restricciones...');

    // 1. Verificar restricciones actuales usando √≠ndices en lugar de constraints
    const [indexes] = await sequelize.query(`
      SELECT indexname as index_name, indexdef as index_definition
      FROM pg_indexes
      WHERE tablename = 'participants';
    `);

    console.log('√çndices actuales en tabla participants:');
    indexes.forEach(idx => {
      console.log('- Nombre:', idx.index_name);
      console.log('  Definici√≥n:', idx.index_definition);
    });

    // 2. Buscar √≠ndice √∫nico en cedula
    const cedulaIndex = indexes.find(idx =>
      idx.index_name.includes('cedula') &&
      idx.index_definition.includes('UNIQUE')
    );

    if (cedulaIndex) {
      console.log('‚ùå Eliminando √≠ndice √∫nico en cedula:', cedulaIndex.index_name);

      try {
        await sequelize.query(`DROP INDEX IF EXISTS ${cedulaIndex.index_name};`);
        console.log('‚úÖ √çndice √∫nico eliminado exitosamente');
      } catch (dropError) {
        console.error('‚ùå Error eliminando √≠ndice:', dropError.message);
        // Intentar con ALTER TABLE como √∫ltimo recurso
        try {
          await sequelize.query('ALTER TABLE participants DROP CONSTRAINT IF EXISTS participants_cedula;');
          console.log('‚úÖ Restricci√≥n eliminada con ALTER TABLE');
        } catch (alterError) {
          console.error('‚ùå Error con ALTER TABLE:', alterError.message);
        }
      }
    } else {
      console.log('‚ÑπÔ∏è No se encontr√≥ √≠ndice √∫nico en cedula');
    }

    // 3. Verificar que ticket_number siga siendo √∫nico
    const ticketIndex = indexes.find(idx =>
      idx.index_name.includes('ticket_number') &&
      idx.index_definition.includes('UNIQUE')
    );

    if (ticketIndex) {
      console.log('‚úÖ √çndice √∫nico en ticket_number existe (correcto)');
    } else {
      console.log('‚ö†Ô∏è ADVERTENCIA: √çndice √∫nico en ticket_number no encontrado');
    }

    // 4. Verificar √≠ndices finales
    const [finalIndexes] = await sequelize.query(`
      SELECT indexname as index_name, indexdef as index_definition
      FROM pg_indexes
      WHERE tablename = 'participants';
    `);

    console.log('√çndices finales:');
    finalIndexes.forEach(idx => {
      console.log('- Nombre:', idx.index_name);
      console.log('  Definici√≥n:', idx.index_definition);
    });

    // 5. Probar creaci√≥n de registro con c√©dula existente (SIN cerrar conexi√≥n)
    console.log('üß™ Verificando funcionalidad de m√∫ltiples boletos...');

    try {
      // Solo verificar que podemos consultar la tabla sin errores
      const [testQuery] = await sequelize.query(`
        SELECT COUNT(*) as total FROM participants WHERE cedula = '22006181'
      `);

      console.log(`‚úÖ Consulta exitosa: ${testQuery[0].total} registros encontrados con c√©dula 22006181`);
      console.log('‚úÖ Funcionalidad de m√∫ltiples boletos verificada');

    } catch (testError) {
      console.error('‚ùå ERROR en verificaci√≥n:', testError.message);
      if (testError.name === 'SequelizeUniqueConstraintError') {
        console.error('Campos con error de unicidad:', testError.fields);
        console.log('‚ö†Ô∏è Restricci√≥n √∫nica a√∫n existe - correcci√≥n fallida');
      } else {
        console.error('Error inesperado en verificaci√≥n:', testError.stack);
      }
      // No fallar completamente por error de verificaci√≥n
    }

    console.log('üéâ CORRECCI√ìN COMPLETADA: M√∫ltiples boletos funcionan correctamente');

  } catch (error) {
    console.error('‚ùå ERROR en correcci√≥n:', error.message);
    if (error.name === 'SequelizeUniqueConstraintError') {
      console.error('Campos con error de unicidad:', error.fields);
    }
  } finally {
    // NO cerrar conexi√≥n aqu√≠ - dejar que app.js la maneje
    console.log('üîß Correcci√≥n finalizada, dejando conexi√≥n abierta para app.js');
  }
}

module.exports = fixConstraints;

// Ejecutar solo si se llama directamente
if (require.main === module) {
  fixConstraints();
}